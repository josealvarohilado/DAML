{"ast":null,"code":"var _jsxFileName = \"/home/alvaro/Documents/DAML/create-daml-app/ui/src/components/MessageEdit.tsx\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport { Form, Button } from 'semantic-ui-react';\nimport { User } from '@daml.js/create-daml-app';\nimport { useParty, useLedger } from '@daml/react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\n/**\n * React component to edit a message to send to a follower.\n */\nconst MessageEdit = ({\n  followers\n}) => {\n  _s();\n\n  const sender = useParty();\n  const [receiver, setReceiver] = React.useState();\n  const [content, setContent] = React.useState(\"\");\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const ledger = useLedger();\n\n  const submitMessage = async event => {\n    try {\n      event.preventDefault();\n\n      if (receiver === undefined) {\n        return;\n      }\n\n      setIsSubmitting(true);\n      await ledger.exerciseByKey(User.User.SendMessage, receiver, {\n        sender,\n        content\n      });\n      setContent(\"\");\n    } catch (error) {\n      alert(`Error sending message:\\n${JSON.stringify(error)}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    onSubmit: submitMessage,\n    children: [/*#__PURE__*/_jsxDEV(Form.Dropdown, {\n      selection: true,\n      className: \"test-select-message-receiver\",\n      placeholder: \"Select a follower\",\n      options: followers.map(follower => ({\n        key: follower,\n        text: follower,\n        value: follower\n      })),\n      value: receiver,\n      onChange: event => {\n        var _event$currentTarget$;\n\n        return setReceiver((_event$currentTarget$ = event.currentTarget.textContent) !== null && _event$currentTarget$ !== void 0 ? _event$currentTarget$ : undefined);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Input, {\n      className: \"test-select-message-content\",\n      placeholder: \"Write a message\",\n      value: content,\n      onChange: event => setContent(event.currentTarget.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      fluid: true,\n      className: \"test-select-message-send-button\",\n      type: \"submit\",\n      disabled: isSubmitting || receiver === undefined || content === \"\",\n      loading: isSubmitting,\n      content: \"Send\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n\n_s(MessageEdit, \"WPwDR6w7vc5taWB0jsr4Z/pAL70=\", false, function () {\n  return [useParty, useLedger];\n});\n\n_c = MessageEdit;\nexport default MessageEdit;\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageEdit\");","map":{"version":3,"sources":["/home/alvaro/Documents/DAML/create-daml-app/ui/src/components/MessageEdit.tsx"],"names":["React","Form","Button","User","useParty","useLedger","MessageEdit","followers","sender","receiver","setReceiver","useState","content","setContent","isSubmitting","setIsSubmitting","ledger","submitMessage","event","preventDefault","undefined","exerciseByKey","SendMessage","error","alert","JSON","stringify","map","follower","key","text","value","currentTarget","textContent"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,mBAA7B;AAEA,SAASC,IAAT,QAAqB,0BAArB;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,aAApC;;;AAMA;AACA;AACA;AACA,MAAMC,WAA4B,GAAG,CAAC;AAACC,EAAAA;AAAD,CAAD,KAAiB;AAAA;;AACpD,QAAMC,MAAM,GAAGJ,QAAQ,EAAvB;AACA,QAAM,CAACK,QAAD,EAAWC,WAAX,IAA0BV,KAAK,CAACW,QAAN,EAAhC;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,KAAK,CAACW,QAAN,CAAe,EAAf,CAA9B;AACA,QAAM,CAACG,YAAD,EAAeC,eAAf,IAAkCf,KAAK,CAACW,QAAN,CAAe,KAAf,CAAxC;AACA,QAAMK,MAAM,GAAGX,SAAS,EAAxB;;AAEA,QAAMY,aAAa,GAAG,MAAOC,KAAP,IAAkC;AACtD,QAAI;AACFA,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAIV,QAAQ,KAAKW,SAAjB,EAA4B;AAC1B;AACD;;AACDL,MAAAA,eAAe,CAAC,IAAD,CAAf;AACA,YAAMC,MAAM,CAACK,aAAP,CAAqBlB,IAAI,CAACA,IAAL,CAAUmB,WAA/B,EAA4Cb,QAA5C,EAAsD;AAACD,QAAAA,MAAD;AAASI,QAAAA;AAAT,OAAtD,CAAN;AACAC,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD,KARD,CAQE,OAAOU,KAAP,EAAc;AACdC,MAAAA,KAAK,CAAE,2BAA0BC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAsB,EAAlD,CAAL;AACD,KAVD,SAUU;AACRR,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAdD;;AAgBA,sBACE,QAAC,IAAD;AAAM,IAAA,QAAQ,EAAEE,aAAhB;AAAA,4BACE,QAAC,IAAD,CAAM,QAAN;AACE,MAAA,SAAS,MADX;AAEE,MAAA,SAAS,EAAC,8BAFZ;AAGE,MAAA,WAAW,EAAC,mBAHd;AAIE,MAAA,OAAO,EAAEV,SAAS,CAACoB,GAAV,CAAcC,QAAQ,KAAK;AAAEC,QAAAA,GAAG,EAAED,QAAP;AAAiBE,QAAAA,IAAI,EAAEF,QAAvB;AAAiCG,QAAAA,KAAK,EAAEH;AAAxC,OAAL,CAAtB,CAJX;AAKE,MAAA,KAAK,EAAEnB,QALT;AAME,MAAA,QAAQ,EAAES,KAAK;AAAA;;AAAA,eAAIR,WAAW,0BAACQ,KAAK,CAACc,aAAN,CAAoBC,WAArB,yEAAoCb,SAApC,CAAf;AAAA;AANjB;AAAA;AAAA;AAAA;AAAA,YADF,eASE,QAAC,IAAD,CAAM,KAAN;AACE,MAAA,SAAS,EAAC,6BADZ;AAEE,MAAA,WAAW,EAAC,iBAFd;AAGE,MAAA,KAAK,EAAER,OAHT;AAIE,MAAA,QAAQ,EAAEM,KAAK,IAAIL,UAAU,CAACK,KAAK,CAACc,aAAN,CAAoBD,KAArB;AAJ/B;AAAA;AAAA;AAAA;AAAA,YATF,eAeE,QAAC,MAAD;AACE,MAAA,KAAK,MADP;AAEE,MAAA,SAAS,EAAC,iCAFZ;AAGE,MAAA,IAAI,EAAC,QAHP;AAIE,MAAA,QAAQ,EAAEjB,YAAY,IAAIL,QAAQ,KAAKW,SAA7B,IAA0CR,OAAO,KAAK,EAJlE;AAKE,MAAA,OAAO,EAAEE,YALX;AAME,MAAA,OAAO,EAAC;AANV;AAAA;AAAA;AAAA;AAAA,YAfF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA0BD,CAjDD;;GAAMR,W;UACWF,Q,EAIAC,S;;;KALXC,W;AAmDN,eAAeA,WAAf","sourcesContent":["import React from 'react'\nimport { Form, Button } from 'semantic-ui-react';\nimport { Party } from '@daml/types';\nimport { User } from '@daml.js/create-daml-app';\nimport { useParty, useLedger } from '@daml/react';\n\ntype Props = {\n  followers: Party[];\n}\n\n/**\n * React component to edit a message to send to a follower.\n */\nconst MessageEdit: React.FC<Props> = ({followers}) => {\n  const sender = useParty();\n  const [receiver, setReceiver] = React.useState<string | undefined>();\n  const [content, setContent] = React.useState(\"\");\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\n  const ledger = useLedger();\n\n  const submitMessage = async (event: React.FormEvent) => {\n    try {\n      event.preventDefault();\n      if (receiver === undefined) {\n        return;\n      }\n      setIsSubmitting(true);\n      await ledger.exerciseByKey(User.User.SendMessage, receiver, {sender, content});\n      setContent(\"\");\n    } catch (error) {\n      alert(`Error sending message:\\n${JSON.stringify(error)}`);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <Form onSubmit={submitMessage}>\n      <Form.Dropdown\n        selection\n        className='test-select-message-receiver'\n        placeholder=\"Select a follower\"\n        options={followers.map(follower => ({ key: follower, text: follower, value: follower }))}\n        value={receiver}\n        onChange={event => setReceiver(event.currentTarget.textContent ?? undefined)}\n      />\n      <Form.Input\n        className='test-select-message-content'\n        placeholder=\"Write a message\"\n        value={content}\n        onChange={event => setContent(event.currentTarget.value)}\n      />\n      <Button\n        fluid\n        className='test-select-message-send-button'\n        type=\"submit\"\n        disabled={isSubmitting || receiver === undefined || content === \"\"}\n        loading={isSubmitting}\n        content=\"Send\"\n      />\n    </Form>\n  );\n};\n\nexport default MessageEdit;"]},"metadata":{},"sourceType":"module"}